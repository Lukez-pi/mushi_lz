#! /usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function
import os
import glob
from SCons.Script import Environment, AddOption, GetOption
from collections import defaultdict

# Set up SCons environment
environ = os.environ.copy()
env = Environment(ENV=environ)

# command line arguments
AddOption('--bcfs',
          dest='bcfs',
          type='string',
          metavar='<path>',
          help='path to directory containing 1KG bcf files')
bcf_dir = GetOption('bcfs')
AddOption('--ancs',
          dest='ancs',
          type='string',
          metavar='<path>',
          help='path to directory containing ancestral fasta files')
ancs_dir = GetOption('ancs')
AddOption('--kmer',
          dest='k',
          type='int',
          default=3,
          metavar='<int>',
          help='context window size for kSFS (default 3)')
k = GetOption('k')
AddOption('--samples',
          dest='samples',
          type='string',
          metavar='<path>',
          default=3,
          help='optional path to file populations for each sample (i.e. '
               'integrated_call_samples_v3.20130502.ALL.panel)')
samples = GetOption('samples')
AddOption('--pops',
          dest='pops',
          type='string',
          metavar='<pop1,pop2,...>',
          default=None,
          help='comma-separated list of populations (default all)')
if GetOption('pops') is None:
    pops = None
else:
    pops = set(GetOption('pops').split(','))
AddOption('--mask',
          dest='mask',
          type='string',
          metavar='<path>',
          help='path to pilot/strict accessibility mask bed file')
mask = GetOption('mask')
AddOption('--outdir',
          type='string',
          metavar="DIR",
          default='scons_output',
          help='directory in which to output results will be created if '
               'nonexistant (default "scons_output")')
outdir = GetOption('outdir')
AddOption('--mushi_cfg',
          type='string',
          metavar="PATH",
          help='path to mushi config file')
mushi_cfg = GetOption('mushi_cfg')

# parse the --jobs command line argument
n_jobs = GetOption('num_jobs')

# need this so scons -h runs without error
if bcf_dir is not None:
    # accessibility mask (no "chr", autosomes only)
    tgt = [os.path.join(outdir, 'mask.bed.gz'),
           os.path.join(outdir, 'mask.bed.gz.tbi')]
    src = mask
    cmd = ('egrep "chr[0-9]*\\t" ${SOURCE} | cut -c4- | cut -f1-3 '
           '| bgzip > ${TARGETS[0]} && tabix -p bed ${TARGETS[0]}')
    mask = env.Command(tgt, src, cmd)

    # loop over chromosome bcf files
    # chromosomes = [22]
    chromosomes = range(1, 23)
    masked_sizes = []
    vcf_mutation_types = []
    for chro in (str(chro_int) for chro_int in chromosomes):
        # get ancestral alignment for this chromosome
        anc_fasta = glob.glob(f'{ancs_dir}/human_ancestor_{chro}.fa')
        assert len(anc_fasta) == 1
        anc_fasta = anc_fasta[0]

        # the effective mask chromosome size after accounting for ancestral
        # state identifiability
        tgt = os.path.join(outdir, f'masked_size.{chro}.tsv')
        src = [mask[0], anc_fasta]
        cmd = (f'tabix -p bed ${{SOURCES[0]}} {chro}: '
               f'| python ../mutyper/masked_size.py ${{SOURCES[1]}} --k {k} '
               '> ${TARGET}')
        masked_sizes.append(env.Command(tgt, src, cmd))

        # get bcf for this chromosome
        # NOTE assumes chro is indicated by 2nd '.'-delimited field in bcf
        # file name
        bcf = glob.glob(f'{bcf_dir}/*chr{chro}.*.bcf')
        assert len(bcf) == 1
        bcf = bcf[0]

        # create vcf for this chromosome with kmer mutation type in INFO field
        tgt = os.path.join(outdir, f'mutation_types.{chro}.bcf')
        src = [mask[0], bcf, anc_fasta]
        cmd = ('bcftools view -T ${SOURCES[0]} -m2 -M2 -v snps -c 1:minor -Ou -f PASS -U ${SOURCES[1]} '
               f'| python ../mutyper/ancestor.py ${{SOURCES[2]}} --k {k} '
               '| bcftools convert -Ob > $TARGET')
        vcf_mutation_types.append(env.Command(tgt, src, cmd))

    # nested dict of superpopulation -> population -> sample list
    superpops = defaultdict(lambda: defaultdict(list))
    with open(samples) as f:
        f.readline()
        for line in f:
            sample, pop, superpop = line.split('\t')[:3]
            if pops is None or pop in pops:
                superpops[superpop][pop].append(sample)

    # loop over populations and compute sample frequency data
    for superpop in superpops:
        for pop in superpops[superpop]:
            # k-SFS
            tgt = os.path.join(outdir, f'{k}-SFS.{superpop}.{pop}.tsv')
            cmd = ('bcftools concat -n -Ou $SOURCES '
                   f'| bcftools view -s {",".join(superpops[superpop][pop])} -c 1:minor -Ou '
                   '| python ../mutyper/ksfs.py > $TARGET')
            freqs = env.Command(tgt, vcf_mutation_types, cmd)

    # masked genome size for mutation rate estimation
    tgt = os.path.join(outdir, f'masked_size.tsv')
    cmd = 'python masked_size_aggregator.py $SOURCES > $TARGET'
    masked_size = env.Command(tgt, masked_sizes, cmd)
